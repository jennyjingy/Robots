{"ast":null,"code":"var _jsxFileName = \"/Users/yaohuijing/Robots/src/containers/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox.js';\nimport Scroll from '../components/Scroll.js';\nimport './App.css';\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  } // onSearchChange = (event) => {\n  //     this.setState({searchfield: event.target.value})\n  // }\n\n\n  render() {\n    const _this$props = this.props,\n          searchField = _this$props.searchField,\n          onSearchChange = _this$props.onSearchChange,\n          robots = _this$props.robots,\n          isPending = _this$props.isPending;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return isPending ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Loading\") : React.createElement(\"div\", {\n      className: \"tc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"f1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Robofriends\"), React.createElement(SearchBox, {\n      searchChange: onSearchChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(Scroll, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(CardList, {\n      robots: filteredRobots,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/yaohuijing/Robots/src/containers/App.js"],"names":["React","Component","connect","CardList","SearchBox","Scroll","setSearchField","requestRobots","mapStateToProps","state","searchField","searchRobots","robots","isPending","mapDispatchToProps","dispatch","onSearchChange","event","target","value","onRequestRobots","App","componentDidMount","props","render","filteredRobots","filter","robot","name","toLowerCase","includes"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAO,WAAP;AACA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,YAA9C;;AAEA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHC,IAAAA,WAAW,EAAED,KAAK,CAACE,YAAN,CAAmBD,WAD7B;AAEHE,IAAAA,MAAM,EAAEH,KAAK,CAACF,aAAN,CAAoBK,MAFzB;AAGHC,IAAAA,SAAS,EAAEJ,KAAK,CAACF,aAAN,CAAoBM;AAH5B,GAAP;AAMH,CAPD;;AAQA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAM;AACNC,IAAAA,cAAc,EAAEC,KAAK,IAAIF,QAAQ,CAACT,cAAc,CAACW,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf,CAD3B;AAENC,IAAAA,eAAe,EAAE,MAAML,QAAQ,CAACR,aAAa,EAAd;AAFzB,GAAN;AAIH,CALD;;AAMA,MAAMc,GAAN,SAAkBpB,SAAlB,CAA4B;AAGxBqB,EAAAA,iBAAiB,GAAG;AAEhB,SAAKC,KAAL,CAAWH,eAAX;AAEH,GAPuB,CAQxB;AACA;AAEA;;;AAEAI,EAAAA,MAAM,GAAG;AAAA,wBAEoD,KAAKD,KAFzD;AAAA,UAEEb,WAFF,eAEEA,WAFF;AAAA,UAEeM,cAFf,eAEeA,cAFf;AAAA,UAE8BJ,MAF9B,eAE8BA,MAF9B;AAAA,UAEsCC,SAFtC,eAEsCA,SAFtC;AAGL,UAAMY,cAAc,GAAGb,MAAM,CAACc,MAAP,CAAcC,KAAK,IAAI;AAC1C,aAAOA,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCpB,WAAW,CAACmB,WAAZ,EAAlC,CAAP;AACH,KAFsB,CAAvB;AAGA,WAAOhB,SAAS,GAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADgB,GAIhB;AAAK,MAAA,SAAS,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAI,MAAA,SAAS,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,EAEI,oBAAC,SAAD;AAAW,MAAA,YAAY,EAAEG,cAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD;AAAU,MAAA,MAAM,EAAES,cAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAHJ,CAJA;AAaP;;AAhC2B;;AAmC5B,eAAevB,OAAO,CAACM,eAAD,EAAkBM,kBAAlB,CAAP,CAA6CO,GAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox.js';\nimport Scroll from '../components/Scroll.js';\nimport './App.css';\nimport { setSearchField, requestRobots } from '../actions'\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending\n\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return{\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n}\n}\nclass App extends Component {\n    \n\n    componentDidMount() {\n       \n        this.props.onRequestRobots();\n        \n    }\n    // onSearchChange = (event) => {\n    //     this.setState({searchfield: event.target.value})\n       \n    // }\n\n    render() {\n        \n        const{ searchField, onSearchChange,robots, isPending } = this.props;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n        return isPending ? \n        <h1>Loading</h1> :\n        \n    (\n        <div className='tc'>\n            <h1 className='f1'>Robofriends</h1>\n            <SearchBox searchChange={onSearchChange}/>\n            <Scroll>\n                <CardList robots={filteredRobots} />\n            </Scroll>\n        </div>\n    )\n        \n}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);"]},"metadata":{},"sourceType":"module"}