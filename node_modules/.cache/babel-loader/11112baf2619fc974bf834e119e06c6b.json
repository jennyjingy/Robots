{"ast":null,"code":"import { CHANGE_SEARCHFIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants.js';\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCHFIELD,\n  payload: text\n});\nexport const requestRobots = dispatch => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  });\n  fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(data => dispatch({\n    type: REQUEST_ROBOTS_SUCCESS,\n    payload: data\n  })).catch(error => diapatch({\n    type: REQUEST_ROBOTS_FAILED,\n    payload: error\n  }));\n};","map":{"version":3,"sources":["/Users/yaohuijing/Robots/src/actions.js"],"names":["CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearchField","text","type","payload","requestRobots","dispatch","fetch","then","response","json","data","catch","error","diapatch"],"mappings":"AAAA,SACIA,kBADJ,EAEIC,sBAFJ,EAGIC,sBAHJ,EAIIC,qBAJJ,QAKO,gBALP;AAQA,OAAO,MAAMC,cAAc,GAAIC,IAAD,KAAW;AAErCC,EAAAA,IAAI,EAAEN,kBAF+B;AAGrCO,EAAAA,OAAO,EAAEF;AAH4B,CAAX,CAAvB;AAMP,OAAO,MAAMG,aAAa,GAAGC,QAAQ,IAAI;AACrCA,EAAAA,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEL;AAAR,GAAD,CAAR;AACAS,EAAAA,KAAK,CAAC,4CAAD,CAAL,CACKC,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUG,IAAI,IAAIL,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAAEJ,sBAAP;AAA+BK,IAAAA,OAAO,EAAEO;AAAxC,GAAD,CAF1B,EAGKC,KAHL,CAGWC,KAAK,IAAIC,QAAQ,CAAC;AAACX,IAAAA,IAAI,EAACH,qBAAN;AAA6BI,IAAAA,OAAO,EAACS;AAArC,GAAD,CAH5B;AAIH,CANM","sourcesContent":["import {\n    CHANGE_SEARCHFIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\n\nexport const setSearchField = (text) => ({\n    \n    type: CHANGE_SEARCHFIELD,\n    payload: text\n    \n})\nexport const requestRobots = dispatch => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING})\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => diapatch({type:REQUEST_ROBOTS_FAILED, payload:error}))\n}"]},"metadata":{},"sourceType":"module"}